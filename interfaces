fmTask: GObject

    signals:
// task finished (might be error/cancelled)
finish                              (task)

    properties:
// desc that can be general, or include file being copied, etc
desc
// -1 if n/a; else pctg (0.42 = 42%)
progress

    api:
fmTask *        new                 (func, data)
gulong          connect             (task, callback, data, destroy_fn)
gboolean        cancel              (task)
gboolean        is_cancelled        (task)
fmTaskState     get_state           (task)
void            get_error           (task, error)
void            get_ret_value       (task, value)
void            set_error           (task, domain, code, fmt, ...)
void            take_error          (task, error)
void            set_ret_value       (task, value)

fmNode: GObject

fmNode *        new                 (provider, location, is_container)
fmNode *        new_from_node       (provider, location, is_container, node_sce)
fmProvider *    get_provider        (node)
gchar *         get_location        (node)
gboolean        add_property        (node, prop_name, type, value, get_value, set_value, error)
gboolean        set_property        (node, prop_name, value, error)
fmTask *        set_property_task   (node, prop_name, value, callback, data, error)
void            get                 (node, error, name, ...)
void            refresh             (node)
gboolean        is_container        (node)
gchar *         set_location        (node, new_location)
void            set_property_value  (node, prop_name, value)

fmProvider: GInterface

    signals:
// new node created, for plugins to add properties, etc
node-created                        (provider, node)
// "file" has been deleted, node is "invalid"
node-removed                        (provider, node)
// node location changed
node-location-updated               (provider, node, old_location)
// property on node was updated
node-updated::property              (provider, node)
// got children of node
node-children                       (provider, node, children)
// node has a new child (i.e. for tree, not list)
node-new-child                      (provider, node, child)
// node has a new "content" (i.e. for list, not tree)
node-new-content                    (provider, node, content)

    api:
fmProvider *    new                 (void)
fmNode *        get_node            (provider, location, container_only, error)
void            get_node_async      (provider, location, container_only, cancellable, callback, data)
fmNode *        get_node_finish     (provider, result, error)
fmNode **       get_content         (provider, node, error)
fmTask *        get_content_task    (provider, node, callback, data, error)
fmNode **       get_children        (provider, node, error)
fmTask *        get_children_task   (provider, node, callback, data, error)
gboolean        remove_node         (provider, node, error)
fmTask *        remove_node_task    (provider, node, callback, data, error)

