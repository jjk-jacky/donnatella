fmTask: GObject

    properties:
// general desc of the task (read-only) (NULL for internal tasks)
desc
// priority
priority
// current op (e.g. file being copied) (write-only-for-func)
status
// -1 if n/a; else pctg (0.42 = 42%) (write-only-for-func)
progress
// fmTaskState
state

    api:
fmTask *        new                 (desc, func, data, cb, cb_data, t_out, t_out_cb, t_out_data)
void            cancel              (task)
void            pause               (task)
void            resume              (task)
gboolean        get_error           (task, error)
// for cb
gboolean        get_ret_value       (task, value)
// for func
gboolean        is_cancelled        (task)
void            update              (task, has_progress, progress, has_status, status, ...)
void            set_error           (task, domain, code, fmt, ...)
void            take_error          (task, error)
void            set_ret_value       (task, value)

fmNode: GObject

fmNode *        new                 (provider, loc_get, loc_set, cont_get, cont_set, chdn_get, chdn_set)
fmNode *        new_from_node       (provider, loc_get, loc_set, cont_get, cont_set, chdn_get, chdn_set, node_sce)
gboolean        add_property        (node, prop_name, type, value, get_value, set_value, error)
fmTask *        set_property        (node, prop_name, value, callback, data, error)
void            get                 (node, error, name, ...)
void            refresh             (node)
void            set_property_value  (node, prop_name, value)

fmProvider: GInterface

    properties:
// domain (read-only)
domain

    signals:
// new node created, for plugins to add properties, etc
node-created                        (provider, node)
// "file" has been deleted, node is "invalid"
node-removed                        (provider, node)
// property on node was updated
node-updated::property              (provider, node, name)
// got children of node
node-children                       (provider, node, children)
// node has a new child (i.e. for tree, not list)
node-new-child                      (provider, node, child)
// node has a new "content" (i.e. for list, not tree)
node-new-content                    (provider, node, content)

    api:
fmTask *        get_node            (provider, location, cb, cb_data, error)
fmTask *        get_content         (provider, node, callback, data, error)
fmTask *        get_children        (provider, node, callback, data, error)
fmTask *        remove_node         (provider, node, callback, data, error)

Provider: Base Class

Handles all the hash_table business, with the recursive mutex to be thread safe
and the toggle-lock on nodes to free memory when needed, etc

Requires implementations to provide the following virtual methods:
fmNode *        new_node            (provider, location, error)
fmNode **       get_content         (provider, node, error)
fmNode **       get_children        (provider, node, error)
gboolean        remove_node         (provider, node, error)

