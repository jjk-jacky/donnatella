# donnatella default config

#
#       LAYOUTS
#

[layouts]
std=paneH(!treeview:tree@230,treeview:list)
dp=paneH(!treeview:tree@230,paneV(treeview:foo,treeview:list))
tm=paneV(paneH(!treeview:tree@230,paneV(treeview:list,treeview:list2))@300,!treeview:tm)


#
#       DONNA
#

[donna]
layout=std
width=1080
height=420
active_list=list
domain_exec:title-domain=custom
custom_exec=Search Results
domain_task:title-domain=custom
domain_register:title-domain=custom
# user-made, to restore location on event "start"
last_location=~


#   PREFIXES

[donna/prefixes/]
prefix=/
replacement=fs:/

[donna/prefixes/]
prefix=~
is_home_dir=true

[donna/prefixes/]
prefix=>
replacement=exec:>

[donna/prefixes/]
prefix=!
replacement=exec:!

[donna/prefixes/]
prefix=<
replacement=exec:<

[donna/prefixes/]
prefix=&
replacement=exec:&

[donna/prefixes/]
prefix=@
replacement=command:


#   ALIASES

[donna/aliases/g]
replacement=exec:>git

[donna/aliases/m]
replacement=exec:>man

[donna/aliases/f]
replacement=exec:<find

[donna/aliases/pcql]
replacement=exec:<pacman -Qlq


#
#       STATUS BAR
#

[statusbar]
areas=tasks,active,infos,keys,focus

[statusbar/tasks]
source=:task
format=%A %F
expand=false

[statusbar/active]
source=:active
expand=false
format=%v/%a files (%V) %N
size_format=%R

[statusbar/infos]
source=:app
format=%i
timeout=5
format_tooltip=%d
format_d=%i

[statusbar/keys]
source=:focused
format=%k
width=150
expand=false

[statusbar/focus]
source=:focused
format=%o %K
width=100
expand=false
key_modes_colors=true
key_mode_select_background-rgba=rgba(0,42,200,0.8)
key_mode_select_foreground=white


#
#       EVENTS
#

# in each events, the option names are user-defined, the values the full
# location to trigger. Options will be sorted by their names before being
# triggered.


#   GENERIC

# start: on app start, to load marks, treeviews, etc
[events/start]
last_location=command:tv_set_location (:active, @config_get_string (donna/last_location))
marks=command:mark_load (,1)
registers=command:register_load_all (,1)
# enable when using layout "tm"
#tm=@tv_set_location(tm,task:/)

# pre-exit: command must return integer 1 to cancel the exit
[events/pre-exit]
confirm=command:tasks_pre_exit()

[events/exit]
last_location=command:config_set_string (donna/last_location, @tv_get_location (:active))
marks=command:mark_save ()
registers=command:register_save_all ()
save_config=command:config_save ()


#   TASK MANAGER

[task_manager/events/task_done]
remove=command:nodes_io (%n, d)

[task_manager/events/task_failed]
notify=exec:&notify-send "Donnatella: A task just failed" %N



#
#       DEFAULTS
#

#   TREES

[defaults/trees]
click_mode=tree
key_mode=donna
node_types:node-type=containers
show_hidden=false
sort_groups:sg=first
select_highlight:highlight=column
context_menu_menus=context
context_menu=add_root,:move_root:up<:move_root:first>,:move_root:down<:move_root:last>,:remove_row,-,goto<goto_fs,marks>,-,save_tree<save_tree_as>,load_tree<load_tree_from>,-,tree_visuals<@tree_visuals>,-,tv_options<!tv_options>,-,@register,-,:register:+<@register:+>,-,:refresh<@refresh>

[defaults/trees/arrangement]
columns=name
sort_column=name


#   LISTS

[defaults/lists]
click_mode=list
key_mode=donna
show_hidden=true
node_types:node-type=all
sort_groups:sg=first
select_highlight:highlight=column-underline
focusing_click=true
goto_item_set:tree-set=scroll,focus
history_max=100
context_menu_menus=context
context_menu=@go:tree,marks,-,add_to_tree<add_as_root>,-,!new_nodes,-,@register,-,@selection,-,column_edit<!column_edit>,-,:refresh<@refresh>
context_menu_fs=@go:tree,marks,-,add_to_tree<add_as_root>,-,!new_nodes,new_items,-,@register,-,:register:+<@register:+>,-,@selection,-,column_edit<!column_edit,-,@touch>,-,:refresh<@refresh>
context_menu_task=@selection,-,:refresh<@refresh>,-,@tasks
context_menu_colheader=columns<!columns>,-,:sort_order<!sort_order>,:second_sort_order<!second_sort_order>,-,options<column_options<!column_options>,list_options<!tv_options>>

# some color filters

[defaults/lists/arrangement/color_filters/]
filter=*.tar.*|*.tgz|*.zip|*.rar
column=name
foreground=green

[defaults/lists/arrangement/color_filters/]
filter=size:0
column=size
bold=true

[defaults/lists/arrangement/color_filters/]
filter=size:>1G
column=size
foreground-rgba=rgb(255,0,0)

[defaults/lists/arrangement/color_filters/]
filter=size:700M-1G
column=size
foreground-rgba=rgb(190,0,0)

[defaults/lists/arrangement/color_filters/]
filter=size:>=350M
column=size
foreground-rgba=rgb(108,0,0)

[defaults/lists/arrangement/color_filters/]
# modified less than an hour ago
filter=time:A<=1H
column=time
foreground-rgba=rgb(0,80,210)

[defaults/lists/arrangement/color_filters/]
# modified today
filter=time:A0d
column=time
foreground-rgba=rgb(0,150,200)

[defaults/lists/arrangement/color_filters/]
# modified yesterday
filter=time:A1d
column=time
foreground-rgba=rgb(0,200,160)

[defaults/lists/arrangement/color_filters/]
# modified this week
filter=time:A0V
column=time
foreground-rgba=rgb(0,180,0)

[defaults/lists/arrangement/color_filters/]
# everyone can write or execute
filter=perms:/o=wx
column=perms
background=yellow

[defaults/lists/arrangement/color_filters/]
# we (current user) can execute
filter=perms:sx
column=own
background-rgba=rgb(0,255,0)


# default sorting options
[defaults/sort]
locale_based=false
natural_order=true
dot_first=true
dot_mixed=false
case_sensitive=false
ignore_spunct=false

# default size options
[defaults/size]
format=%b
digits=2
long_unit=false

# default time options
[defaults/time]
format=%F %T
age_span_seconds=604800
age_fallback_format=%F %T


#   COLUMN TYPES

[defaults/column_types/line-numbers]
relative=true
relative_focused=true

[defaults/column_types/name]
desc_first=false

[defaults/column_types/size]
desc_first=true
property=size
format_tooltip=%R

[defaults/column_types/time]
desc_first=true
property=mtime
property_tooltip=mtime
format_tooltip=%A %e %B %Y, %T (%o)
age_span_seconds_tooltip=604800
age_fallback_format_tooltip=%F %T

[defaults/column_types/perms]
format=%S
format_tooltip=%p (%o)
color_user=green
color_group=blue
color_mixed=#00aaaa
sort=1


#   COLUMNS

[defaults/lists/columns/ln]
type:ct=line-number
title=#
width=30

[defaults/lists/columns/name]
type:ct=name
title=Name
width=515

[defaults/lists/columns/size]
type:ct=size
title=Size
width=80

[defaults/lists/columns/time]
type:ct=time
title=Modified
width=110

[defaults/lists/columns/perms]
type:ct=perms
title=Perms
width=30

[defaults/lists/columns/own]
type:ct=perms
title=Own
width=70
format=%V:%H
format_tooltip=
sort=3

[defaults/lists/columns/desc]
type:ct=text
title=Description
property=desc

[defaults/lists/columns/label]
type:ct=label

[defaults/lists/columns/mark-type]
type:ct=value
title=Type of Mark
width=80
property_value=mark-type
property_extra=mark-type-extra

[defaults/lists/columns/mark-value]
type:ct=text
title=Mark Destination
width=420
property=value

[defaults/lists/columns/opt-type]
type:ct=value
title=Option Type
width=108
show_type=true

[defaults/lists/columns/path]
type:ct=text
title=Path
property=path

[defaults/lists/columns/progress]
type:ct=progress
title=Progress

[defaults/lists/columns/text]
type:ct=text

[defaults/lists/columns/value]
type:ct=value
title=Option Value


[defaults/trees/columns/name]
type:ct=name


#
#       ARRANGEMENTS
#


# File System

[arrangements/]
mask=fs:/*
columns=ln,name,size,time,perms,own
sort_column=name
sort_order:order=asc
second_sort_column=name
second_sort_order:order=asc
second_sort_sticky=true
second_sort_always=true


# Search Results

[arrangements/]
mask=exec:*
columns=ln,path,name,size,time,perms,own
sort_column=path
sort_order:order=asc
second_sort_column=name
second_sort_order:order=asc
second_sort_sticky=true
second_sort_always=true

# reduce column "Name" since we added "Path"
[arrangements//columns_options/name]
width=285

#
# Configuration

[arrangements/]
mask=config:/*
columns=ln,name,opt-type,value

[arrangements//columns_options/name]
width=230

[arrangements//columns_options/value]
width=420


# Task Manager

[arrangements/]
mask=task:/*
columns=ln,name,progress,text,label

[arrangements//columns_options/name]
title=Task
width=230

[arrangements//columns_options/progress]
title=Progress
width=80

[arrangements//columns_options/text]
title=Status
property=status
width=230

[arrangements//columns_options/label]
title=State
property=state
labels=0=Stopped,1=Waiting,2=Running,3=On Hold,4=Paused,5=Cancelled,6=Failed,7=Done
width=80


# Marks

[arrangements/]
mask=mark:/*
columns=ln,name,mark-type,mark-value

[arrangements//columns_options/name]
width=230


#
#       CLICK MODES
#

# define how the clicks are handled on trees. Note that without a patched GTK it
# is not possible to handle clicks on the expander, so all expander_* will be
# ignored.
[click_modes/tree]
# different ways to toggle the row
expander_left_click=command:tv_toggle_row (%o, %r, s)
expander_ctrl_left_click=command:tv_maxi_expand (%o, %r)
expander_shift_left_click=command:tv_maxi_collapse (%o, %r)
expander_middle_click=command:tv_toggle_row (%o, %r, maxi)
expander_ctrl_middle_click=command:tv_toggle_row (%o, %r, full)
# on right-click popup the children, to easily go to somewhere down. Especially
# useful on minitree
expander_right_click=command:node_popup_children (%n,c,children)
expander_shift_right_click=command:node_popup_children (%n,c,children_not_hidden,not .*)
# for minitree, and roots
shift_middle_click=command:tv_remove_row(%o,%r)
# popup context menu
right_click=command:void(@tv_set_focus(%o,%r),@tv_context_popup (%o, %r))
right_click_on_rls=true
blank_right_click=command:void(@tv_set_focus(%o,%r),@tv_context_popup (%o, %r))
blank_right_click_on_rls=true
blankrow_right_click=command:tv_context_popup (%o)
blankrow_right_click_on_rls=true
blankcol_right_click=command:tv_context_popup (%o)
blankcol_right_click_on_rls=true
# click on the icon/name to set the cursor
[click_modes/tree/columns/name]
left_click=command:tv_set_cursor (%o, %r)

# for unpatched GTK, let's have a way to toggle rows. Because GTK doesn't let us
# know when the expander was click, all the expander_* options are useless. The
# only think that will then work is a double click on the expander to toggle the
# row (some hardcoded GTK behavior), but it sucks.
# So, we'll use the middle click to toggle the row (doesn't even have to be on
# the expander!); hold Ctrl for a maxi toggle
[click_modes/tree_unpatched]
fallback=tree
middle_click=command:tv_toggle_row (%o, %r, s)
ctrl_middle_click=command:tv_toggle_row (%o, %r, maxi)


# define how clicks are handled on lists
[click_modes/list]
colheader_left_click=command:tv_set_sort (%o, %R)
# on_rls is good in general for menus, and required here for the column dragging
# to work
colheader_left_click_on_rls=true
colheader_ctrl_left_click=command:tv_set_second_sort (%o, %R)
colheader_middle_click=command:tv_set_second_sort (%o, %R)
# we'll use option defaults/lists/context_menu_colheader to define the context
# menu content
colheader_right_click=command:tv_context_popup (%o,,%R,@config_get_string (defaults/lists/context_menu_colheader))
colheader_right_click_on_rls=true
# middle click to scroll to focused row
blank_middle_click=command:tv_goto_line (%o, s, :focused,,l)
# dbl-middle click to go from containers (folders) to items (files). Kinda
# assumes all containers are groupped together
blank_middle_double_click=command:tv_goto_line (%o, s+f, :other,,l)
# context menu
blank_right_click=command:tv_context_popup (%o)
blank_right_click_on_rls=true
blankcol_right_click=command:tv_context_popup (%o)
blankcol_right_click_on_rls=true
blankrow_right_click=command:tv_context_popup (%o)
blankrow_right_click_on_rls=true
right_click=command:void(@tv_set_focus(%o,%r),@tv_context_popup (%o, %r))
right_click_on_rls=true
# click blank to unselect
blank_left_click=command:tv_selection (%o, unselect, :all)
blankrow_left_click=command:tv_selection (%o, unselect, :all)
blankcol_left_click=command:tv_selection (%o, unselect, :all)
# this means a left click unselects. We'll override this for column name, so
# this will make clicking on other columns (size, etc) unselect all
left_click=command:tv_selection (%o, un, :all,)
# selection stuff
ctrl_left_click=command:tv_selection (%o, inv, %r, 0)
shift_left_click=command:tv_selection (%o, i, %r, 1)
ctrl_shift_left_click=command:tv_selection (%o, sel, %r, 1)
# activate == execute/open kinda stuff
left_double_click=command:tv_activate_row (%o, %r)
# middle click to edit (rename, set time, etc)
middle_click=command:tv_column_edit (%o, %r, %R)
# click the name to set the focus
[click_modes/list/columns/name]
left_click=command:tv_set_focus (%o, %r)
# ctrl+dbl-click on a selected item activates all selected items
[click_modes/list/columns/name/selected]
ctrl_left_double_click=command:tv_activate_row (%o, :selected)


#
#       KEY MODES
#

# define the keys on treeviews; with some vim-inspired mappings
[key_modes/donna/key_Escape]
trigger=command:void(@tv_reset_keys (%o), @tv_abort (%o))
[key_modes/donna/key_Menu]
trigger=command:tv_context_popup (%o, %r)
[key_modes/donna/key_BackSpace]
trigger=command:tv_go_up (%o, %m, f)
[key_modes/donna/key_Insert]
trigger=command:tv_go_down (%o, %m)
[key_modes/donna/key_F5]
trigger=command:tv_refresh (%o, normal)
[key_modes/donna/key_Up]
trigger=command:tv_goto_line (%o, s+f, :prev, %m, r)
is_motion=true
[key_modes/donna/key_Down]
trigger=command:tv_goto_line (%o, s + f, :next, %m, r)
is_motion=true
[key_modes/donna/key_k]
type:key=alias
key=Up
[key_modes/donna/key_j]
type:key=alias
key=Down
[key_modes/donna/key_g]
# to specified line, or first
trigger=command:tv_goto_line (%o, s+f, 1, %m, l)
is_motion=true
[key_modes/donna/key_G]
# to specified line, or last
trigger=command:tv_goto_line (%o, s+f, :last, %m, l)
is_motion=true
[key_modes/donna/key_braceleft]
# focus the top row. If already there, scroll on screen up & focus the new top
# row
trigger=command:tv_goto_line (%o, s+f, :top, %m, r)
is_motion=true
[key_modes/donna/key_braceright]
# focus the bottom row. If already there, scroll on screen up & focus the new
# bottom row
trigger=command:tv_goto_line (%o, s+f, :bottom, %m, r)
is_motion=true
[key_modes/donna/key_Home]
type:key=alias
key=g
[key_modes/donna/key_End]
type:key=alias
key=G
[key_modes/donna/key_Page_Up]
# scroll only
trigger=command:tv_goto_line (%o, s, :top, %m, r)
[key_modes/donna/key_Page_Down]
# scroll only
trigger=command:tv_goto_line (%o, s, :bottom, %m, r)
[key_modes/donna/key_percent]
# percent of the entire list
trigger=command:tv_goto_line (%o, s+f, :focused, %m, p)
is_motion=true
[key_modes/donna/key_ugrave]
# percent of the visible area
trigger=command:tv_goto_line (%o, f, :focused, %m, v)
[key_modes/donna/key_twosuperior]
is_motion=true
# toggle between containers (folders) and items (files)
trigger=command:tv_goto_line (%o,s+f,:other,,l)
[key_modes/donna/key_notsign]
is_motion=true
# scroll to focused row
trigger=command:tv_goto_line (%o,s,:focused,,l)
[key_modes/donna/key_Return]
trigger=command:node_trigger (%n)
[key_modes/donna/key_KP_Enter]
type:key=alias
key=Return

# set sort orders
[key_modes/donna/key_numbersign]
type:key=combine
spec:spec=custom
custom_chars=aduADU
combine=order
[key_modes/donna/key_s]
type:key=spec
spec:spec=lower,upper,digits
combine=order
trigger=command:tv_set_sort (%o,%k,%c)
[key_modes/donna/key_S]
type:key=spec
spec:spec=lower,upper,digits
combine=order
trigger=command:tv_set_second_sort (%o,%k,%c)

# edit (rename, set time, etc) Can use the first letter of the column (e.g. "n"
# for name, "t" for time, etc) or a number for for n-th column
[key_modes/donna/key_e]
type:key=spec
spec:spec=lower,upper,digits
trigger=command:tv_column_edit (%o,:focused,%k)

# marks: m to set to current location, M to current row, ' to jump
[key_modes/donna/key_m]
type:key=spec
spec:spec=lower,upper
trigger=command:mark_set (%k,,,%*l)
[key_modes/donna/key_M]
type:key=spec
spec:spec=lower,upper
trigger=command:mark_set (%k,,,%*n)
[key_modes/donna/key_apostrophe]
type:key=spec
spec:spec=lower,upper,extra
trigger=command:tv_set_location (%o, @mark_get_node (%k))

# Del: remove selection if any, else focused row
[key_modes/donna/key_Delete]
trigger=command:nodes_remove_from (%S, @tv_get_location (%o))
# d: remove focused row (regardless of selection)
[key_modes/donna/key_d]
trigger=command:nodes_remove_from (@tv_get_nodes (%o, %r), @tv_get_location (%o))
# D: remove selection (fails if none)
[key_modes/donna/key_D]
trigger=command:nodes_remove_from (@tv_get_nodes (%o, :selected), @tv_get_location (%o))

# history stuff
[key_modes/donna/key_Left]
trigger=command:tv_history_move (%o)
[key_modes/donna/key_Right]
trigger=command:tv_history_move (%o,f)
[key_modes/donna/key_h]
trigger=command:menu_popup (@tv_history_get (%o), not_sorted)

# registers
[key_modes/donna/key_quotedbl]
type:key=combine
spec:spec=lower,upper,digits,extra
combine=register
# y: yank/copy
[key_modes/donna/key_y]
type:key=spec
spec:spec=motion
combine=register
trigger=command:register_set (%c, copy, @tv_get_nodes (%o, %r, 1))
# Y: yank/copy selection
[key_modes/donna/key_Y]
combine=register
trigger=command:register_set (%c, copy, @tv_get_nodes (%o, :selected))
# x: cut
[key_modes/donna/key_x]
type:key=spec
spec:spec=motion
combine=register
trigger=command:register_set (%c, cut, @tv_get_nodes (%o, %r, 1))
# X: cut selection
[key_modes/donna/key_X]
combine=register
trigger=command:register_set (%c, cut, @tv_get_nodes (%o, :selected))
# a: append
[key_modes/donna/key_a]
type:key=spec
spec:spec=motion
combine=register
trigger=command:register_add_nodes (%c, @tv_get_nodes (%o, %r, 1))
# A: append selection
[key_modes/donna/key_A]
combine=register
trigger=command:register_add_nodes (%c, @tv_get_nodes (%o, :selected, 1))

# p: paste
[key_modes/donna/key_p]
combine=register
trigger=command:register_nodes_io (%c, auto, @tv_get_location (%o))
# P: paste (copy)
[key_modes/donna/key_P]
combine=register
trigger=command:register_nodes_io (%c, copy, @tv_get_location (%o))
# O: paste (move)
[key_modes/donna/key_O]
combine=register
trigger=command:register_nodes_io (%c, move, @tv_get_location (%o))
# E: delete register context (NOT empty the register) (think Erase)
[key_modes/donna/key_E]
combine=register
trigger=command:register_nodes_io (%c, del)
# N: paste in new folder
[key_modes/donna/key_N]
combine=register
trigger=command:register_nodes_io (%c, copy, @tv_get_location (%o), 1)

# "quicktrigger"
[key_modes/donna/key_colon]
trigger=command:node_trigger(@ask_text(Enter FL to trigger))

# interactive search
[key_modes/donna/key_slash]
trigger=command:tv_start_interactive_search (%o)

# F6 to edit focused item (vim in a terminal)
[key_modes/donna/key_F6]
trigger=exec:>vim %:n
# F9 to view focused item (less in a terminal)
[key_modes/donna/key_F9]
trigger=exec:>less %:n

# selection stuff -- note that this required a patched GTK (to invert range)
[key_modes/donna/key_v]
type:key=spec
spec:spec=motion
trigger=command:tv_selection (%o, i, %r, 1)
[key_modes/donna/key_V]
trigger=command:void(@tv_selection (%o, s, :focused), @tv_set_key_mode (%o, select))


# for unpatched GTK (no range (spec motion), invert the focused row)
[key_modes/donna_unpatched]
fallback=donna
[key_modes/donna_unpatched/key_v]
trigger=command:tv_selection (%o, i, %r)


# select mode: move around & select everything
[key_modes/select/key_Up]
trigger=command:tv_goto_line (%o, s+f, :prev, %m, r, s, 1)
is_motion=true
[key_modes/select/key_Down]
trigger=command:tv_goto_line (%o, s+f, :next, %m, r, s, 1)
is_motion=true
[key_modes/select/key_k]
type:key=alias
key=Up
[key_modes/select/key_j]
type:key=alias
key=Down
[key_modes/select/key_g]
trigger=command:tv_goto_line (%o, s+f, 1, %m, l, s, 1)
is_motion=true
[key_modes/select/key_G]
trigger=command:tv_goto_line (%o, s+f, :last, %m, l, s, 1)
is_motion=true
[key_modes/select/key_braceleft]
trigger=command:tv_goto_line (%o, s+f, :top, %m, r, s, 1)
is_motion=true
[key_modes/select/key_braceright]
trigger=command:tv_goto_line (%o, s+f, :bottom, %m, r, s, 1)
is_motion=true

# registers
[key_modes/select/key_quotedbl]
type:key=combine
spec:spec=lower,upper,digits,extra
combine=register
# y: yank/copy selection, unselect all, reset keys (out of select mode)
[key_modes/select/key_y]
combine=register
trigger=command:void(@register_set (%c, copy, @tv_get_nodes (%o, :selected)), @tv_selection (%o, uns, :all), @tv_reset_keys (%o))
# a: add selection, unselect all, reset keys (out of select mode)
[key_modes/select/key_a]
combine=register
trigger=command:void(@register_add_nodes (%c, @tv_get_nodes (%o, :selected)), @tv_selection (%o, uns, :all), @tv_reset_keys (%o))
# x: cut selection, unselect all, reset keys (out of select mode)
[key_modes/select/key_x]
combine=register
trigger=command:void(@register_set (%c, cut, @tv_get_nodes (%o, :selected)), @tv_selection (%o, uns, :all), @tv_reset_keys (%o))


#
#       CONTEXT MENUS
#

[context_menus/tree_views/aliases]
# "Go Up" submenu w/ a few other Go commands
go=:go.up:f<:go.tree_root:%C,-,:go.up:f+s,:go.back,:go.forward,:go.down>
# selection stuff
selection=selection_select,selection_invert,selection_unselect,selection_filter
# set of commands for a register (can be specified as extra)
register=:register.cut:%C,:register.copy:%C,:register.append:%C,:register.paste:%C<:register.paste:%C,:register.paste_copy:%C,:register.paste_move:%C,:register.paste_new_folder:%C>
# "Refresh" submenu
refresh=:refresh.visible,:refresh.simple,:refresh,:refresh.reload
# a few timestamping stuff
touch=touch_now
# commands for tasks
tasks=:domain.task.toggle,:domain.task.cancel,:domain.task.show_ui
# submenu of tree visuals
tree_visuals=:tree_visuals.name,:tree_visuals.icon,:tree_visuals.box,:tree_visuals.highlight,:tree_visuals.click_mode


#   GENERIC (TREE & LIST)

[context_menus/tree_views/goto]
type:context-type=empty
name=Go to...
icon=go-jump
menu=children

[context_menus/tree_views/goto_fs]
type:context-type=trigger
trigger=fs:/

[context_menus/tree_views/marks]
type:context-type=container
name=Go to mark...
icon=go-jump
trigger=mark:/
submenus:enabled=enabled
menu=marks


#   TREE-SPECIFIC

[context_menus/tree_views/add_root]
name=Add New Root...
icon=list-add
trigger=command:tv_add_root (%o, @ask_text (Add New Root,Enter full location of the new root))
trigger_ref_when=has_ref
trigger_ref=command:tv_add_root (%o, @ask_text (Add New Root,Enter full location of the new root,,%*r))

[context_menus/tree_views/load_tree]
name=Load Tree
trigger=command:tv_load_tree_file (%o, %o, all)

[context_menus/tree_views/load_tree_from]
name=Load Tree From...
trigger=command:tv_load_tree_file (%o, @ask_text (Load Tree From...,Enter the name of the file), all)

[context_menus/tree_views/save_tree]
name=Save Tree
trigger=command:tv_save_tree_file (%o, %o, all)

[context_menus/tree_views/save_tree_as]
name=Save Tree As...
trigger=command:tv_save_tree_file (%o, @ask_text (Save Tree As...,Enter the name of the file), all)

[context_menus/tree_views/tree_visuals]
type:context-type=empty
is_sensitive=has_ref
name=Tree Visuals...
submenu:enabled=enabled

[context_menus/tree_views/tv_options]
type:context-type=empty
name=Tree Options
icon=preferences-desktop
submenu:enabled=enabled


#   LIST-SPECIFIC

# Adding current location to "tree"

[context_menus/tree_views/add_to_tree]
name=Add Current Location To Tree
trigger=command:tv_set_location (tree, @tv_get_location (%o))

[context_menus/tree_views/add_as_root]
name=...As New Root
trigger=command:tv_add_root (tree, @tv_get_location (%o))

# some submenu parents

[context_menus/tree_views/columns]
type:context-type=empty
name=Columns
menu=sorted

[context_menus/tree_views/column_edit]
type:context-type=empty
name=Edit...
icon=gtk-edit
is_sensitive=has_ref or selection

# "New Items" feature

[context_menus/tree_views/new_items]
type:context-type=container
name=New Items
icon=folder-new
trigger=~/.local/share/new-items
submenus:enabled=enabled
menu=new_items

# Options

[context_menus/tree_views/options]
type:context-type=empty
name=Options
icon=preferences-desktop
submenus:enabled=enabled

[context_menus/tree_views/column_options]
type:context-type=empty
name=Column Options
submenus:enabled=enabled

[context_menus/tree_views/list_options]
type:context-type=empty
name=List Options
submenus:enabled=enabled

# Selection

[context_menus/tree_views/selection_select]
name=Select All
icon=edit-select-all
trigger=command:tv_selection (%o, s, :all)

[context_menus/tree_views/selection_unselect]
name=Unselect All
trigger=command:tv_selection (%o, u, :all)

[context_menus/tree_views/selection_invert]
name=Invert Selection
trigger=command:tv_selection (%o, i, :all)

[context_menus/tree_views/selection_filter]
name=Selection Filter...
trigger=command:tv_selection_nodes (%o, d, @nodes_filter (@tv_get_nodes (%o, :all), @ask_text (Selection Filter,Enter the selection filter to apply), %o))

# Timestamp stuff

[context_menus/tree_views/touch_now]
is_visible=ref_not_selected or (ref_selected or (not has_ref and selection))
name_ref=Set time to now
trigger_ref_when=ref_not_selected
trigger_ref=command:tv_column_set_value (%o, %r,, time, n)
name_sel=Set time to now (selection)
trigger_sel_when=ref_selected or (not has_ref and selection)
trigger_sel=command:tv_column_set_value (%o, :selected,, time, n)


#
#       MENUS
#

# when showing context menus
[menus/context]
sort=false
submenus:enabled=combine
use_default_icons=false
left_click=command:node_trigger (%n, t, t+p)

# submenu marks
[menus/marks]
sort=true
use_default_icons=false
children:node-type=items

# "New Items" feature
[menus/new_items]
sort=true
left_click=command:tv_goto_line (:active, s+f, @nodes_io (%n, c, @tv_get_location (:active), @ask_text (New Items,Enter the name of the item to create,@node_get_property(%n,name))))

# to show children but not hidden/dotFiles
[menus/children_not_hidden]
sort=true
submenus:enabled=combine
children=2
children_show_hidden=false

# to show all children (inc. hidden/dotFiles)
[menus/children]
sort=true
submenus:enabled=combine
children=2

# don't sort items
[menus/not_sorted]
sort=false

# sort items
[menus/sorted]
sort=true


#
#       TREE VIEWS
#

# "tree"

[tree_views/tree]
is_tree=true
auto_focus_sync=true
is_minitree=true
sync_with=:active
sync_mode:sync=full
sync_scroll=false
show_hidden=false
node_visuals:visuals=icon,box,highlight


# "list"

[tree_views/list]
is_tree=false

[tree_views/list/arrangements]
type:enabled=combine

[tree_views/list/arrangements/]
mask=fs:/tmp/*

[tree_views/list/arrangements//columns_options/time]
format=%O


# "list2"

[tree_views/list2]
is_tree=false


# "tm"

[tree_views/tm]
is_tree=false
not_active_list=true


#
#       PROVIDERS
#

[providers/exec]
terminal=urxvt -hold -e


#
#       (NODE) VISUALS
#

[visuals/]
node=config:/
box=box-orange


# EOF
